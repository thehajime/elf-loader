  - i386: figure out if we can do correct function pointer comparisons 
    across shared object boundaries. ex: function defined in shared library,
    pointer taken in executable, given to shared library, comparison must be
    equal. The issue here is the relationship between the shared library
    PLTs/GOT and main executable PLT/GOT.

from prelink document:
----------------------
Function pointer equality requirement for functions called from executables. When address of 
some global function is taken, at least C and C++ require that this pointer is the same in the 
whole program. Executables typically contain position dependent code, so when code in the 
executable takes address of some function not defined in the executable itself, that address 
must be link time constant. Linker accomplishes this by creating at PLT slot for the function 
unless there was one already and resolving to the address of PLT slot. The symbol for the 
function is created with st value equal to address of the PLT slot, but st shndx set to SHN 
UNDEF. Such symbols are treated specially by the dynamic linker, in that PLT relocations resolve 
to first symbol in the global search scope after the executable, while symbol lookups for all 
other relocation types return the address of the symbol in the executable. Unfortunately, GNU 
linker doesn’t differentiate between taking address of a function in an executable (especially 
one for which no dynamic relocation is possible in case it is in read-only segment) and just 
calling the function, but never taking its address. If it cleared the st value field of the SHN 
UNDEF function symbols in case nothing in the executable takes the function’s address, several 
prelink conflict could disappear (SHN UNDEF symbols with st value set to 0 are treated always as 
real undefined symbols by the dynamic linker).

  - make sure we use the minimum permissions for ro code sections: some of these
    sections might not need EXEC protection

  - PT_INTERP will be invalid when main exec is loader itself

  - get rid of calls everywhere to vdl_file_get_dynamic. Cache the result in VdlFile

  - get rid of gc_symbols_resolved_in and use the GOT instead.

  - implement _dl_* functions in glibc.c

  - setup the stack guard within the tcbhead at some point ? 

  - figure out what to do with:
     EXTERN void (*_dl_init_static_tls) (struct link_map *);
     I have no idea what the above is used for. It appears to be unused
     EXTERN void (*_dl_wait_lookup_done) (void);
     the above appears to have been deleted
/* If loading a shared object requires that we make the stack executable
     when it was not, we do it by calling this function.
     It returns an errno code or zero on success.  */
  EXTERN int (*_dl_make_stack_executable_hook) (void **) internal_function;
  EXTERN void **(*_dl_error_catch_tsd) (void) __attribute__ ((const));
  // theoretically, the rtld_load_lock could be implemented
  // completely within the loader without asking libpthread to do anything.
  EXTERN void (*_dl_rtld_lock_recursive) (void *);
  EXTERN void (*_dl_rtld_unlock_recursive) (void *);
  _dl_stack_flags (used by libpthread to check whether stacks should be executable)
  _dl_load_lock (used by libpthread to initialize correctly its dl lock)

   - make sure that tls_index is at the right offset from start of pthread descriptor.
     i.e., it needs to be at the same offset as l_modid for gdb to be able to debug tls 
     variables

   - make locking policy really consistent (move locks in external wrappers)

   - implement and patch in glibc __libc_dlerror_tsd ? Where is this thing coming from ?

   - implement dladdr

   - handle ORIGIN and PLATFORM

   - implement BIND_NOW flag in DT_FLAGS

   - should test scopes

   - must find a better way to handle the resolv trampoline debug info
     for stack trace management from gdb

   - handle STB_WEAK vs STB_GLOBAL: I don't know what a non-undef STB_WEAK symbol means.

   - handle VER_FLG_WEAK. ? I think that this is supposed to identify a version a binary needs
     but it's not a fatal error if this version cannot be found in any dependent binary.
     i.e., we don't care about this.

   - figure out why we need to iterate over the verneed array to find a symbol definition.

   - must test dlmopen